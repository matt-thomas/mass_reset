<?php

/**
 * Implements hook_user_operations().
 */
function mass_reset_user_operations() {
  $operations = array(
    'reset' => array(
      'label' => t('Reset the selected user passwords.'),
      'callback' => 'mass_reset_send_password_reset_email',
    ),
  );
  return $operations;
}

/**
 * Implements hook_action_info().
 */
function mass_reset_action_info() {
  return array(
    'mass_reset_send_password_reset_email_user_action' => array(
      'description' => t('Send password reset email.'),
      'type' => 'user',
      'configurable' => FALSE,
      'hooks' => array(),
    ),
  );
}

/**
 * Operations callback. Sets password blank and sends reset emali.
*/
function mass_reset_send_password_reset_email($accounts) {
  foreach ($accounts as $uid) {
    $user = user_load(array('uid' => (int)$uid));
    if ($uid && $uid > 1) {
      // set blank password for user
      db_query("UPDATE {users} SET pass = '' WHERE uid = %d", $uid);
      // send password reset email
      _user_mail_notify('password_reset', $user);
      // destroy all user sessions
      sess_destroy_uid($uid);
      watchdog('action', 'Sent password reset email for user %name.', array('%name' => check_plain($user->name)));
    }
  }
}

/**
 * Implementation of a Drupal action.
 * Sends the user a password reset email.
 */
function mass_reset_send_password_reset_email_user_action(&$object, $context = array()) {
  if (isset($object->uid)) {
    $uid = $object->uid;
  }
  elseif (isset($context['uid'])) {
    $uid = $context['uid'];
  }
  else {
    // something went wrong
    $uid = NULL;
  }
  if ($uid && $uid > 1) {
    $user = user_load($uid);
    // set blank password for user
    db_query("UPDATE {users} SET pass = '' WHERE uid = %d", $uid);
    // send password reset email
    _user_mail_notify('password_reset', $user);
    // destroy all user sessions
    sess_destroy_uid($uid);
    watchdog('action', 'Sent password reset email for user %name.', array('%name' => check_plain($user->name)));
  }
}